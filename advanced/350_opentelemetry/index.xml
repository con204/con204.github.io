<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Observability with AWS Distro for Open Telemetry on Amazon EKS Workshop</title>
    <link>/advanced/350_opentelemetry/</link>
    <description>Recent content in Observability with AWS Distro for Open Telemetry on Amazon EKS Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 Oct 2021 13:38:20 +0000</lastBuildDate><atom:link href="/advanced/350_opentelemetry/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>/advanced/350_opentelemetry/introduction/</link>
      <pubDate>Tue, 13 Nov 2018 16:36:24 +0900</pubDate>
      
      <guid>/advanced/350_opentelemetry/introduction/</guid>
      <description>AWS Distro for OpenTelemetry is a secure, production-ready, AWS-supported distribution of the OpenTelemetry project. Part of the Cloud Native Computing Foundation, OpenTelemetry provides open source APIs, libraries, and agents to collect distributed traces and metrics for application monitoring.
Benefits of using ADOT:
 AWS Distro for OpenTelemetry empowers you to implement broad yet efficient, secure yet flexible, observability solutions It helps you optimize your production environments by ensuring predictable resource utilization, and can increase your analytical visibility while protecting your investment in standardized observability tools It is backed by AWS Support, testing, and certification.</description>
    </item>
    
    <item>
      <title>Deploy Backend Microservices</title>
      <link>/advanced/350_opentelemetry/deploy_backend_microservices/</link>
      <pubDate>Tue, 12 Oct 2021 14:34:29 +0000</pubDate>
      
      <guid>/advanced/350_opentelemetry/deploy_backend_microservices/</guid>
      <description>Deploy Backend Microservices The microservice we are going to deploy looks like this one:
Grab a copy of the microservices:
git clone https://github.com/con204/adot-demo.git cd adot-demo Deploy the microservice&amp;rsquo;s databases into your EKS Cluster:
kubectl apply -f kubernetes/databases/ Quickly, check all the database services are deployed and ready to receive requests: $ kubectl get pods NAME READY STATUS RESTARTS AGE employee-mongo-67cd95c7d9-jdhfb 1/1 Running 0 13s jaeger-tracing-salaryamount-mysql-76cf744c75-t9q85 1/1 Running 0 13s salary-grade-postgres-database-6df4676bb-j59lp 1/1 Running 0 13s  Deploy the backend services:</description>
    </item>
    
    <item>
      <title>Deploy Frontend</title>
      <link>/advanced/350_opentelemetry/deploy_frontend/</link>
      <pubDate>Tue, 12 Oct 2021 14:34:29 +0000</pubDate>
      
      <guid>/advanced/350_opentelemetry/deploy_frontend/</guid>
      <description>Deploy Frontend Now that we deployed our backend microservices, let&amp;rsquo;s go and deploy our frontend stack.
Grab the Backend Service ELB, and deploy our Front End:
export API_BACKEND=$(kubectl get svc jaeger-tracing-nodejs-service --template &amp;#34;{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}&amp;#34;) echo -e &amp;#34;API_BACKEND: $API_BACKEND&amp;#34; envsubst &amp;lt; kubernetes/frontend/jaeger-tracing-frontend-service-deployment.yaml | sponge kubernetes/frontend/jaeger-tracing-frontend-service-deployment.yaml kubectl apply -f kubernetes/frontend/ Now we wait for all the pods to be up and running: $ kubectl get pods NAME READY STATUS RESTARTS AGE employee-mongo-67cd95c7d9-26w8x 1/1 Running 0 29m jaeger-tracing-frontend-service-5dd45d5bb-rdppb 1/1 Running 0 22m jaeger-tracing-go-service-95556f866-b67zh 1/1 Running 0 29m jaeger-tracing-java-service-74fcd985f6-9qnj4 1/1 Running 0 29m jaeger-tracing-nodejs-service-75fdff7c8c-pfpd4 1/1 Running 0 29m jaeger-tracing-python-service-6fbfbf9b8b-5dgnw 1/1 Running 0 29m jaeger-tracing-salaryamount-mysql-76cf744c75-4d477 1/1 Running 0 29m salary-grade-postgres-database-6df4676bb-dbtzh 1/1 Running 0 29m  Note: It can take a few minutes for all the pods to show a Status of Running and have a READY of 1/1</description>
    </item>
    
  </channel>
</rss>
