<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Service Mesh with Istio on Amazon EKS Workshop</title>
    <link>/advanced/310_servicemesh_with_istio/</link>
    <description>Recent content in Service Mesh with Istio on Amazon EKS Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 13 Nov 2018 16:32:30 +0900</lastBuildDate><atom:link href="/advanced/310_servicemesh_with_istio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>/advanced/310_servicemesh_with_istio/introduction/</link>
      <pubDate>Tue, 13 Nov 2018 16:36:24 +0900</pubDate>
      
      <guid>/advanced/310_servicemesh_with_istio/introduction/</guid>
      <description>This chapter has been updated to Istio 1.10.x Click here to know more about this new release.
 Istio is a completely open source service mesh that layers transparently onto existing distributed applications. It&amp;rsquo;s also a platform, including APIs, that let it integrate into any logging platform, or telemetry or policy system.
Istio works by having a small network proxy sit alongside each microservice called &amp;ldquo;sidecar&amp;rdquo;. It&amp;rsquo;s role is to intercept all of the service’s traffic, and handles it more intelligently than a simple layer 3 network can.</description>
    </item>
    
    <item>
      <title>Download and Install Istio CLI</title>
      <link>/advanced/310_servicemesh_with_istio/download/</link>
      <pubDate>Tue, 13 Nov 2018 16:36:43 +0900</pubDate>
      
      <guid>/advanced/310_servicemesh_with_istio/download/</guid>
      <description>Before we can get started configuring Istio we’ll need to first install the command line tools that you will interact with. To do this run the following.
We will use istio version 1.10.0
 echo &amp;#39;export ISTIO_VERSION=&amp;#34;1.10.0&amp;#34;&amp;#39; &amp;gt;&amp;gt; ${HOME}/.bash_profile source ${HOME}/.bash_profile cd ~/environment curl -L https://istio.io/downloadIstio | ISTIO_VERSION=${ISTIO_VERSION} sh - The installation directory contains:
 Installation YAML files for Kubernetes in install/kubernetes Sample applications in samples/ The istioctl client binary in the bin/ directory (istioctl is used when manually injecting Envoy as a sidecar proxy).</description>
    </item>
    
    <item>
      <title>Install Istio</title>
      <link>/advanced/310_servicemesh_with_istio/install/</link>
      <pubDate>Wed, 20 Mar 2019 13:36:55 +0100</pubDate>
      
      <guid>/advanced/310_servicemesh_with_istio/install/</guid>
      <description>We will install all the Istio components using the built-in demo configuration profile. This installation lets you quickly get started evaluating Istio.
The demo configuration profile is not suitable for performance evaluation. It is designed to showcase Istio functionality with high levels of tracing and access logging. For more information about Istio profile, click here.
 Istio will be installed in the istio-system namespace.
yes | istioctl install --set profile=demo ✔ Istio core installed ✔ Istiod installed ✔ Egress gateways installed ✔ Ingress gateways installed ✔ Installation complete  We can verify all the services have been installed.</description>
    </item>
    
    <item>
      <title>Deploy Sample Apps</title>
      <link>/advanced/310_servicemesh_with_istio/deploy/</link>
      <pubDate>Tue, 13 Nov 2018 16:37:17 +0900</pubDate>
      
      <guid>/advanced/310_servicemesh_with_istio/deploy/</guid>
      <description>The Envoy Sidecar As mentioned during the Istio architecture overview, in order to take advantage of all of Istio’s features pods must be running an Istio sidecar proxy.
Istio offers two ways injecting the Istio sidecar into a pod:
  Manually using the istioctl command.
Manual injection directly modifies configuration, like deployments, and injects the proxy configuration into it.
  Automatically using the Istio sidecar injector.
You will still need to manually enable Istio in each namespace that you want to be managed by Istio.</description>
    </item>
    
    <item>
      <title>Traffic Management</title>
      <link>/advanced/310_servicemesh_with_istio/routing/</link>
      <pubDate>Tue, 13 Nov 2018 21:49:32 +0900</pubDate>
      
      <guid>/advanced/310_servicemesh_with_istio/routing/</guid>
      <description>Create the default destination rules Deploying a microservice-based application in an Istio service mesh allows one to externally control service monitoring and tracing, request (version) routing, resiliency testing, security and policy enforcement, and more in a consistent manner across the services, and the application.
Before you can use Istio to control the Bookinfo version routing, you&amp;rsquo;ll need to define the available versions, called subsets.
In a continuous deployment scenario, for a given service, there can be distinct subsets of instances running different variants of the application binary.</description>
    </item>
    
    <item>
      <title>Monitor &amp; Visualize</title>
      <link>/advanced/310_servicemesh_with_istio/visualize/</link>
      <pubDate>Fri, 28 May 2021 13:59:44 +0100</pubDate>
      
      <guid>/advanced/310_servicemesh_with_istio/visualize/</guid>
      <description>Install Grafana and Prometheus Istio provides a basic sample installation to quickly get Prometheus and Grafana up and running, bundled with all of the Istio dashboards already installed:
export ISTIO_RELEASE=$(echo $ISTIO_VERSION |cut -d. -f1,2) # Install Prometheus kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-${ISTIO_RELEASE}/samples/addons/prometheus.yaml # Install Grafana kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-${ISTIO_RELEASE}/samples/addons/grafana.yaml We can now verify that they have been installed:
kubectl -n istio-system get deploy grafana prometheus NAME READY UP-TO-DATE AVAILABLE AGE grafana 1/1 1 1 63s prometheus 1/1 1 1 64s  Install Jaeger and Kiali Jaeger is an open source end to end distributed tracing system, allowing users to monitor and troubleshoot complex distributed systems.</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>/advanced/310_servicemesh_with_istio/cleanup/</link>
      <pubDate>Wed, 20 Mar 2019 13:59:44 +0100</pubDate>
      
      <guid>/advanced/310_servicemesh_with_istio/cleanup/</guid>
      <description>To cleanup, follow the below steps.
Terminate any kubectl port-forward or watch processes
killall kubectl killall watch When you’re finished experimenting with the Bookinfo sample, uninstall and clean it up using the following instructions
export ISTIO_RELEASE=$(echo $ISTIO_VERSION |cut -d. -f1,2) kubectl delete -f https://raw.githubusercontent.com/istio/istio/release-${ISTIO_RELEASE}/samples/addons/jaeger.yaml kubectl delete -f https://raw.githubusercontent.com/istio/istio/release-${ISTIO_RELEASE}/samples/addons/kiali.yaml kubectl delete -f https://raw.githubusercontent.com/istio/istio/release-${ISTIO_RELEASE}/samples/addons/prometheus.yaml kubectl delete -f https://raw.githubusercontent.com/istio/istio/release-${ISTIO_RELEASE}/samples/addons/grafana.yaml export NAMESPACE=&amp;#34;bookinfo&amp;#34; ${HOME}/environment/istio-${ISTIO_VERSION}/samples/bookinfo/platform/kube/cleanup.sh istioctl manifest generate --set profile=demo | kubectl delete -f - kubectl delete ns bookinfo kubectl delete ns istio-system  You can ignore the errors for non-existent resources because they may have been deleted hierarchically.</description>
    </item>
    
  </channel>
</rss>
