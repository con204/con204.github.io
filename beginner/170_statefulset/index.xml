<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stateful containers using StatefulSets on Amazon EKS Workshop</title>
    <link>/beginner/170_statefulset/</link>
    <description>Recent content in Stateful containers using StatefulSets on Amazon EKS Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Feb 2020 13:57:00 -0800</lastBuildDate><atom:link href="/beginner/170_statefulset/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Amazon EBS CSI Driver</title>
      <link>/beginner/170_statefulset/ebs_csi_driver/</link>
      <pubDate>Sun, 23 Feb 2020 13:57:00 -0800</pubDate>
      
      <guid>/beginner/170_statefulset/ebs_csi_driver/</guid>
      <description>About Container Storage Interface (CSI) The Container Storage Interface (CSI) is a standard for exposing arbitrary block and file storage systems to containerized workloads on Container Orchestration Systems (COs) like Kubernetes.
By using CSI, third-party storage providers can write and deploy plugins exposing new storage systems in Kubernetes without ever having to touch the core Kubernetes code.
About the Amazon EBS CSI Driver The Amazon Elastic Block Store (Amazon EBS) Container Storage Interface (CSI) driver provides a CSI interface that allows Amazon Elastic Kubernetes Service (Amazon EKS) clusters to manage the lifecycle of Amazon EBS volumes for persistent volumes.</description>
    </item>
    
    <item>
      <title>Define Storageclass</title>
      <link>/beginner/170_statefulset/storageclass/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/beginner/170_statefulset/storageclass/</guid>
      <description>Introduction Dynamic Volume Provisioning allows storage volumes to be created on-demand. StorageClass should be pre-created to define which provisioner should be used and what parameters should be passed when dynamic provisioning is invoked.
Define Storage Class Copy/Paste the following commands into your Cloud9 Terminal.
cat &amp;lt;&amp;lt; EoF &amp;gt; ${HOME}/environment/ebs_statefulset/mysql-storageclass.yaml kind: StorageClass apiVersion: storage.k8s.io/v1 metadata: name: mysql-gp2 provisioner: ebs.csi.aws.com # Amazon EBS CSI driver parameters: type: gp2 encrypted: &amp;#39;true&amp;#39; # EBS volumes will always be encrypted by default volumeBindingMode: WaitForFirstConsumer # EBS volumes are AZ specific reclaimPolicy: Delete mountOptions: - debug EoF You can see that:</description>
    </item>
    
    <item>
      <title>Create ConfigMap</title>
      <link>/beginner/170_statefulset/configmap/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/beginner/170_statefulset/configmap/</guid>
      <description>Introduction ConfigMap allow you to decouple configuration artifacts and secrets from image content to keep containerized applications portable. Using ConfigMap, you can independently control the MySQL configuration.
Create the mysql Namespace We will create a new Namespace called mysql that will host all the components.
kubectl create namespace mysql Create ConfigMap Run the following commands to create the ConfigMap.
cd ${HOME}/environment/ebs_statefulset cat &amp;lt;&amp;lt; EoF &amp;gt; ${HOME}/environment/ebs_statefulset/mysql-configmap.yaml apiVersion: v1 kind: ConfigMap metadata: name: mysql-config namespace: mysql labels: app: mysql data: master.</description>
    </item>
    
    <item>
      <title>Create Services</title>
      <link>/beginner/170_statefulset/services/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/beginner/170_statefulset/services/</guid>
      <description>Introduction Kubernetes Service defines a logical set of Pods and a policy by which to access them.
Service can be exposed in different ways by specifying a type in the serviceSpec. StatefulSet currently requires a Headless Service to control the domain of its Pods, directly reach each Pod with stable DNS entries.
By specifying &amp;ldquo;None&amp;rdquo; for the clusterIP, you can create Headless Service.
Create Services Copy/Paste the following commands into your Cloud9 Terminal.</description>
    </item>
    
    <item>
      <title>Create StatefulSet</title>
      <link>/beginner/170_statefulset/statefulset/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/beginner/170_statefulset/statefulset/</guid>
      <description>Introduction StatefulSet consists of serviceName, replicas, template and volumeClaimTemplates:
 serviceName is &amp;ldquo;mysql&amp;rdquo;, headless service we created in previous section replicas is 3, the desired number of pod template is the configuration of pod volumeClaimTemplates is to claim volume for pod based on storageClassName, mysql-gp2 that we created in the Define Storageclass section.  Percona Xtrabackup is used in the template to clone source MySQL server to its followers.
 Create StatefulSet Copy/Paste the following commands into your Cloud9 Terminal.</description>
    </item>
    
    <item>
      <title>Test MySQL</title>
      <link>/beginner/170_statefulset/testmysql/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/beginner/170_statefulset/testmysql/</guid>
      <description>You can use mysql-client to send some data to the leader, mysql-0.mysql by running the following command.
kubectl -n mysql run mysql-client --image=mysql:5.7 -i --rm --restart=Never --\  mysql -h mysql-0.mysql &amp;lt;&amp;lt;EOF CREATE DATABASE test; CREATE TABLE test.messages (message VARCHAR(250)); INSERT INTO test.messages VALUES (&amp;#39;hello, from mysql-client&amp;#39;); EOF Run the following to test follower (mysql-read) received the data.
kubectl -n mysql run mysql-client --image=mysql:5.7 -it --rm --restart=Never --\  mysql -h mysql-read -e &amp;#34;SELECT * FROM test.</description>
    </item>
    
    <item>
      <title>Test Failure</title>
      <link>/beginner/170_statefulset/testfailure/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/beginner/170_statefulset/testfailure/</guid>
      <description>Unhealthy container MySQL container uses readiness probe by running mysql -h 127.0.0.1 -e &amp;lsquo;SELECT 1&amp;rsquo; on the server to make sure MySQL server is still active. Open a new terminal and simulate MySQL as being unresponsive by following command.
kubectl -n mysql exec mysql-1 -c mysql -- mv /usr/bin/mysql /usr/bin/mysql.off This command renames the /usr/bin/mysql command so that readiness probe can&amp;rsquo;t find it. During the next health check, the pod should report one of it&amp;rsquo;s containers is not healthy.</description>
    </item>
    
    <item>
      <title>Test Scaling</title>
      <link>/beginner/170_statefulset/testscaling/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/beginner/170_statefulset/testscaling/</guid>
      <description>More followers can be added to the MySQL Cluster to increase read capacity. This can be done by running the following command.
kubectl -n mysql scale statefulset mysql --replicas=3 You can see the message that StatefulSet &amp;ldquo;mysql&amp;rdquo; scaled. statefulset &amp;#34;mysql&amp;#34; scaled  Watch the progress of ordered and graceful scaling.
kubectl -n mysql rollout status statefulset mysql Waiting for 1 pods to be ready... partitioned roll out complete: 3 new pods have been updated.</description>
    </item>
    
    <item>
      <title>Cleanup</title>
      <link>/beginner/170_statefulset/cleanup/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/beginner/170_statefulset/cleanup/</guid>
      <description>export EBS_CSI_POLICY_NAME=&amp;#34;Amazon_EBS_CSI_Driver&amp;#34; export EBS_CSI_POLICY_ARN=$(aws --region ${AWS_REGION} iam list-policies --query &amp;#39;Policies[?PolicyName==`&amp;#39;${EBS_CSI_POLICY_NAME}&amp;#39;`].Arn&amp;#39; --output text) kubectl delete \  -f ${HOME}/environment/ebs_statefulset/mysql-statefulset.yaml \  -f ${HOME}/environment/ebs_statefulset/mysql-services.yaml \  -f ${HOME}/environment/ebs_statefulset/mysql-configmap.yaml \  -f ${HOME}/environment/ebs_statefulset/mysql-storageclass.yaml # Delete the mysql namespace  kubectl delete namespace mysql # Uninstall the aws-ebs-csi-driver helm -n kube-system uninstall aws-ebs-csi-driver # Delete the service account eksctl delete iamserviceaccount \  --cluster eksworkshop-eksctl \  --namespace kube-system \  --name ebs-csi-controller-irsa \  --wait # Delete the IAM Amazon_EBS_CSI_Driver policy aws iam delete-policy \  --region ${AWS_REGION} \  --policy-arn ${EBS_CSI_POLICY_ARN} cd ${HOME}/environment rm -rf ${HOME}/environment/ebs_statefulset Congratulation!</description>
    </item>
    
  </channel>
</rss>
