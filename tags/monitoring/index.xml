<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>monitoring on Amazon EKS Workshop</title>
    <link>/tags/monitoring/</link>
    <description>Recent content in monitoring on Amazon EKS Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Oct 2018 09:27:46 -0400</lastBuildDate><atom:link href="/tags/monitoring/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monitoring using Prometheus and Grafana</title>
      <link>/intermediate/240_monitoring/</link>
      <pubDate>Sun, 14 Oct 2018 09:27:46 -0400</pubDate>
      
      <guid>/intermediate/240_monitoring/</guid>
      <description>Monitoring using Prometheus and Grafana In this Chapter, we will deploy Prometheus and Grafana to monitor Kubernetes cluster
What is Prometheus? Prometheus is an open-source systems monitoring and alerting toolkit originally built at SoundCloud. Since its inception in 2012, many companies and organizations have adopted Prometheus, and the project has a very active developer and user community. It is now a standalone open source project and maintained independently of any company.</description>
    </item>
    
    <item>
      <title>Monitoring using Pixie</title>
      <link>/intermediate/241_pixie/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intermediate/241_pixie/</guid>
      <description>Monitoring using Pixie In this chapter, we will deploy Pixie to monitor an application on a Kubernetes cluster.
What is Pixie? Pixie is an open-source observability platform for Kubernetes. It helps developers explore, monitor and debug their applications. Pixieâ€™s features include:
Progressive instrumentation
Pixie collects full-body request traces, system resource metrics, and Kubernetes events right out of box. Pixie&amp;rsquo;s auto-instrumentation capabilities require no code changes by the user and consume less than 5% overhead, because it powered by eBPF*.</description>
    </item>
    
    <item>
      <title>Tracing with X-Ray</title>
      <link>/intermediate/245_x-ray/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/intermediate/245_x-ray/</guid>
      <description>Tracing with X-Ray As distributed systems evolve, monitoring and debugging services becomes challenging. Container-orchestration platforms like Kubernetes solve a lot of problems, but they also introduce new challenges for developers and operators in understanding how services interact and where latency exists. AWS X-Ray helps developers analyze and debug distributed services.
In this module, we are going to deploy the X-Ray agent as a DaemonSet, deploy sample front-end and back-end services that are instrumented with the X-Ray SDK, make some sample requests and then examine the traces and service maps in the AWS Management Console.</description>
    </item>
    
    <item>
      <title>Monitoring using Amazon Managed Service for Prometheus / Grafana</title>
      <link>/intermediate/246_monitoring_amp_amg/</link>
      <pubDate>Sun, 14 Oct 2018 09:27:46 -0400</pubDate>
      
      <guid>/intermediate/246_monitoring_amp_amg/</guid>
      <description>Introduction Amazon Managed Service for Prometheus (AMP) Amazon Managed Service for Prometheus is a monitoring service for metrics compatible with the open source Prometheus project, making it easier for you to securely monitor container environments. AMP is a solution for monitoring containers based on the popular Cloud Native Computing Foundation (CNCF) Prometheus project. AMP is powered by Cortex, an open source CNCF project that adds horizontal scalability to ingest, store, query, and alert on Prometheus metrics.</description>
    </item>
    
    <item>
      <title>EKS CloudWatch Container Insights</title>
      <link>/intermediate/250_cloudwatch_container_insights/</link>
      <pubDate>Mon, 13 Apr 2020 15:27:17 -0400</pubDate>
      
      <guid>/intermediate/250_cloudwatch_container_insights/</guid>
      <description>In this chapter we will learn and leverage the new CloudWatch Container Insights to see how you can use native CloudWatch features to monitor your EKS Cluster performance.
You can use CloudWatch Container Insights to collect, aggregate, and summarize metrics and logs from your containerized applications and microservices. Container Insights is available for Amazon Elastic Container Service, Amazon Elastic Kubernetes Service, and Kubernetes platforms on Amazon EC2. The metrics include utilization for resources such as CPU, memory, disk, and network.</description>
    </item>
    
  </channel>
</rss>
