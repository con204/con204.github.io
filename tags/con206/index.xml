<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CON206 on Amazon EKS Workshop</title>
    <link>/tags/con206/</link>
    <description>Recent content in CON206 on Amazon EKS Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Jul 2021 00:00:00 -0300</lastBuildDate><atom:link href="/tags/con206/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>/010_introduction/</link>
      <pubDate>Wed, 03 Oct 2018 10:23:24 -0700</pubDate>
      
      <guid>/010_introduction/</guid>
      <description>Introduction to Kubernetes   A walkthrough of basic Kubernetes concepts.
Welcome to the Amazon EKS Workshop!
The intent of this workshop is to educate users about the features of Amazon EKS.
Background in EKS, Kubernetes, Docker, and container workflows are not required, but they are recommended.
This chapter will introduce you to the basic workings of Kubernetes, laying the foundation for the hands-on portion of the workshop.
Specifically, we will walk you through the following topics:</description>
    </item>
    
    <item>
      <title>Start the workshop...</title>
      <link>/020_prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/020_prerequisites/</guid>
      <description>Getting Started   To start the workshop, follow one of the following depending on whether you are&amp;hellip;
 &amp;hellip;running the workshop on your own (in your own account), or &amp;hellip;attending an AWS hosted event (using AWS provided hashes)  Once you have completed with either setup, continue with Create a Workspace</description>
    </item>
    
    <item>
      <title>Launch using eksctl</title>
      <link>/030_eksctl/</link>
      <pubDate>Tue, 07 Aug 2018 13:36:57 -0700</pubDate>
      
      <guid>/030_eksctl/</guid>
      <description>Launch using eksctl   eksctl is a tool jointly developed by AWS and Weaveworks that automates much of the experience of creating EKS clusters.
In this module, we will use eksctl to launch and configure our EKS cluster and nodes.</description>
    </item>
    
    <item>
      <title>Helm</title>
      <link>/beginner/060_helm/</link>
      <pubDate>Tue, 07 Aug 2018 08:30:11 -0700</pubDate>
      
      <guid>/beginner/060_helm/</guid>
      <description>Helm   This tutorial has been updated for Helm v3. In version 3, the Tiller component was removed, which simplified operations and improved security.
 If you need to migrate from Helm v2 to v3 click here for the official documentation.
 Helm is a package manager for Kubernetes that packages multiple Kubernetes resources into a single logical deployment unit called a Chart. Charts are easy to create, version, share, and publish.</description>
    </item>
    
    <item>
      <title>Health Checks</title>
      <link>/beginner/070_healthchecks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/beginner/070_healthchecks/</guid>
      <description>Health Checks   By default, Kubernetes will restart a container if it crashes for any reason. It uses Liveness and Readiness probes which can be configured for running a robust application by identifying the healthy containers to send traffic to and restarting the ones when required.
In this section, we will understand how liveness and readiness probes are defined and test the same against different states of a pod. Below is the high level description of how these probes work.</description>
    </item>
    
    <item>
      <title>Using Spot Instances with EKS</title>
      <link>/beginner/150_spotnodegroups/</link>
      <pubDate>Mon, 08 Mar 2021 10:00:00 -0800</pubDate>
      
      <guid>/beginner/150_spotnodegroups/</guid>
      <description>Using Spot Instances with EKS   In this module, you will learn how to provision, manage, and maintain your Kubernetes clusters with Amazon EKS on EC2 Spot instances using Spot managed node groups to optimize cost and scale. Click here for a deep-dive blog post on Kubernetes and EC2 Spot Instances in managed node groups.</description>
    </item>
    
    <item>
      <title>Stateful containers using StatefulSets</title>
      <link>/beginner/170_statefulset/</link>
      <pubDate>Sun, 23 Feb 2020 13:57:00 -0800</pubDate>
      
      <guid>/beginner/170_statefulset/</guid>
      <description>Stateful containers using StatefulSets StatefulSet manages the deployment and scaling of a set of Pods, and provides guarantees about the ordering and uniqueness of these Pods, suitable for applications that require one or more of the following.
 Stable, unique network identifiers Stable, persistent storage Ordered, graceful deployment and scaling Ordered, automated rolling updates  In this Chapter, we will review how to deploy a MySQL database using StatefulSet and Amazon Elastic Block Store (EBS) as PersistentVolume.</description>
    </item>
    
    <item>
      <title>Deploying Microservices to EKS Fargate</title>
      <link>/beginner/180_fargate/</link>
      <pubDate>Tue, 09 Apr 2019 00:00:00 -0300</pubDate>
      
      <guid>/beginner/180_fargate/</guid>
      <description>Deploying Microservices to EKS Fargate   AWS Fargate is a technology that provides on-demand, right-sized compute capacity for containers. With AWS Fargate, you no longer have to provision, configure, or scale groups of virtual machines to run containers. This removes the need to choose server types, decide when to scale your node groups, or optimize cluster packing. You can control which pods start on Fargate and how they run with Fargate profiles, which are defined as part of your Amazon EKS cluster.</description>
    </item>
    
    <item>
      <title>Deploying Stateful Microservices with Amazon FSx Lustre</title>
      <link>/beginner/190_fsx_lustre/</link>
      <pubDate>Tue, 10 Aug 2021 00:00:00 -0300</pubDate>
      
      <guid>/beginner/190_fsx_lustre/</guid>
      <description>Deploying Stateful Microservices with Amazon FSx Lustre   Amazon FSx for Lustre is a fully managed service that provides cost-effective, high-performance storage for compute workloads. Many workloads such as machine learning, high performance computing (HPC), video rendering, and financial simulations depend on compute instances accessing the same set of data through high-performance shared storage.
Powered by Lustre, the world&amp;rsquo;s most popular high-performance file system, FSx for Lustre offers sub-millisecond latencies, up to hundreds of gigabytes per second of throughput, and millions of IOPS.</description>
    </item>
    
    <item>
      <title>Deploying Stateful Microservices with AWS EFS</title>
      <link>/beginner/190_efs/</link>
      <pubDate>Tue, 01 Sep 2020 00:00:00 -0300</pubDate>
      
      <guid>/beginner/190_efs/</guid>
      <description>Deploying Stateful Microservices with AWS EFS   Amazon Elastic File System (Amazon EFS) provides a simple, scalable, fully managed elastic NFS file system for use with AWS Cloud services and on-premises resources. It is built to scale on demand to petabytes without disrupting applications, growing and shrinking automatically as you add and remove files, eliminating the need to provision and manage capacity to accommodate growth.
Amazon EFS supports the Network File System version 4 (NFSv4.</description>
    </item>
    
    <item>
      <title>Securing Secrets using SealedSecrets</title>
      <link>/beginner/200_secrets/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 -0300</pubDate>
      
      <guid>/beginner/200_secrets/</guid>
      <description>Securing Secrets using SealedSecrets Kubernetes Secret is a resource that helps cluster operators manage the deployment of sensitive information such as passwords, OAuth tokens, and ssh keys etc. These Secrets can be mounted as data volumes or exposed as environment variables to the containers in a Pod, thus decoupling Pod deployment from managing sensitive data needed by the containerized applications within a Pod.
It is a common practice for a DevOps Team to manage the YAML manifests for various Kubernetes resources and version control them using a Git repository.</description>
    </item>
    
    <item>
      <title>Logging with Elasticsearch, Fluent Bit, and Kibana (EFK)</title>
      <link>/intermediate/230_logging/</link>
      <pubDate>Tue, 21 Jul 2020 22:23:34 -0400</pubDate>
      
      <guid>/intermediate/230_logging/</guid>
      <description>Implement Logging with EFK In this Chapter, we will deploy a common Kubernetes logging pattern which consists of the following:
  Fluent Bit: an open source and multi-platform Log Processor and Forwarder which allows you to collect data/logs from different sources, unify and send them to multiple destinations. It&amp;rsquo;s fully compatible with Docker and Kubernetes environments.
  Amazon Elasticsearch Service: a fully managed service that makes it easy for you to deploy, secure, and run Elasticsearch cost effectively at scale.</description>
    </item>
    
    <item>
      <title>Monitoring using Prometheus and Grafana</title>
      <link>/intermediate/240_monitoring/</link>
      <pubDate>Sun, 14 Oct 2018 09:27:46 -0400</pubDate>
      
      <guid>/intermediate/240_monitoring/</guid>
      <description>Monitoring using Prometheus and Grafana In this Chapter, we will deploy Prometheus and Grafana to monitor Kubernetes cluster
What is Prometheus? Prometheus is an open-source systems monitoring and alerting toolkit originally built at SoundCloud. Since its inception in 2012, many companies and organizations have adopted Prometheus, and the project has a very active developer and user community. It is now a standalone open source project and maintained independently of any company.</description>
    </item>
    
    <item>
      <title>EKS CloudWatch Container Insights</title>
      <link>/intermediate/250_cloudwatch_container_insights/</link>
      <pubDate>Mon, 13 Apr 2020 15:27:17 -0400</pubDate>
      
      <guid>/intermediate/250_cloudwatch_container_insights/</guid>
      <description>In this chapter we will learn and leverage the new CloudWatch Container Insights to see how you can use native CloudWatch features to monitor your EKS Cluster performance.
You can use CloudWatch Container Insights to collect, aggregate, and summarize metrics and logs from your containerized applications and microservices. Container Insights is available for Amazon Elastic Container Service, Amazon Elastic Kubernetes Service, and Kubernetes platforms on Amazon EC2. The metrics include utilization for resources such as CPU, memory, disk, and network.</description>
    </item>
    
  </channel>
</rss>
